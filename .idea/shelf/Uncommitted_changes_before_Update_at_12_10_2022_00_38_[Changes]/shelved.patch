Index: src/main/java/Maryia.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.sql.*;\r\nimport java.util.Scanner;\r\n\r\npublic class Maryia {\r\n    public static int authID = 0;\r\n    public static String userName = \"\";\r\n\r\n    //EDITORDER NEEDS REVIEW\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            Connection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/restaurant\", \"root\", \"rootroot\");\r\n\r\n            welcomeScreen(connection);\r\n//            checkWaiterExists(connection, 2);\r\n//            welcomeWaitersScreen(connection, \"Maryia\");\r\n//            !!!welcomeAdminScreen();\r\n//            viewAllMealsByType(connection);\r\n//            waitersChoice(connection, authID);\r\n//            getAllOrdersByWaiterID(connection, authID);\r\n//            createNewOrder(connection);\r\n//            addMealsToTheOrder(connection, orderID);\r\n//            reserveTable(connection);\r\n//            unreserveTable(connection);\r\n//            editOrder(connection, orderID);\r\n//            cancelOrder(connection, orderID);\r\n//            closeOrder(connection, orderID);\r\n//            viewOrderByID(connection, orderID);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void welcomeScreen(Connection connection) {\r\n        Scanner scan = new Scanner(System.in);\r\n        System.out.println(\"Welcome to the Restaurant System made by Sasha, Lena and Masha. \\nFOR WAITERS: Please insert your personal ID. \\nFOR ADMINS: Press 0. \");\r\n        authID = scan.nextInt();\r\n        if (authID == 0) {\r\n            welcomeAdminScreen(connection);\r\n        } else {\r\n            checkWaiterExists(connection, authID);\r\n        }\r\n    }\r\n\r\n    public static String checkWaiterExists(Connection connection, int authID) {\r\n        String checkUserID = \"SELECT restaurant.checkUserID(\" + authID + \");\";\r\n\r\n        ResultSet resultSet = null;\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(checkUserID);\r\n\r\n            if (!(resultSet == null)) {\r\n                while (resultSet.next()) {\r\n                    userName = resultSet.getString(1);\r\n                    System.out.println(\"\\n\" + userName + \", welcome to the Waiter Side of the Restaurant System.\");\r\n                    welcomeWaitersScreen(connection, userName);\r\n                }\r\n            } else {\r\n                System.out.print(\"---> There is no such user, please try again <---\");\r\n                userName = null;\r\n                welcomeScreen(connection);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return userName;\r\n    }\r\n\r\n    public static void welcomeWaitersScreen(Connection connection, String userName){\r\n        if(userName == null){\r\n            System.out.println(\" ---> There is no such user, please try again <--- \");\r\n            welcomeScreen(connection);\r\n        } else {\r\n            waitersChoice(connection, authID);\r\n            }\r\n        }\r\n\r\n    public static void welcomeAdminScreen(Connection connection) {\r\n        Scanner scan = new Scanner(System.in);\r\n\r\n        System.out.println(\"Welcome to the Admin Side of the Restaurant System. \\nChoose what do you want to do:\");\r\n\r\n        //Дополнить тем, что делает админ\r\n\r\n        int authID = scan.nextInt();\r\n\r\n    }\r\n\r\n    public static void  viewAllMealsByType (Connection connection) {\r\n        String viewMeals = \"SELECT id, meal_type, meal_title, price FROM restaurant.meals INNER JOIN restaurant.meal_type ON meal_type.id = meals.meal_type_id ORDER BY meal_type\";\r\n\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(viewMeals);\r\n\r\n            while (resultSet.next()) {\r\n                System.out.print(resultSet.getInt(1));\r\n                System.out.print(\". \" + resultSet.getString(2));\r\n                System.out.print(\". \" + resultSet.getString(3));\r\n                System.out.println(\". === \" + resultSet.getDouble(4) + \" euro\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void waitersChoice(Connection connection, int authID) {\r\n        Scanner scan = new Scanner(System.in);\r\n        int orderID;\r\n\r\n        System.out.println(\"\"\"\r\n\r\n                What do you want to do next?\r\n\r\n                1. View Menu\r\n                2. Create order\r\n                3. Edit order\r\n                4. Cancel order\r\n                5. Close order\r\n                6. Create a cheque\r\n                7. Reserve table\r\n                8. Take off reservation\"\"\");\r\n\r\n\r\n        int choice = scan.nextInt();\r\n        switch (choice) {\r\n            case 1 -> {\r\n                //1. View Menu\r\n                System.out.println(\"Here is a menu:\\nMealName\\t\\t\\t\\tCategory\\t\\t\\t\\tPrice\");\r\n                viewAllMealsByType(connection);\r\n                welcomeWaitersScreen(connection, userName);\r\n            }\r\n            case 2 ->\r\n                //2. Create order\r\n                    createNewOrder(connection);\r\n            case 3 -> {\r\n                //3. Edit order\r\n                System.out.println(\"Here is a list of all your orders. \" +\r\n                        \"Choose one and insert Order_id below.\\nID   Table\\t\\t\\tStatus\");\r\n                getAllOrdersByWaiterID(connection, authID);\r\n                orderID = scan.nextInt();\r\n                editOrder(connection, orderID);\r\n            }\r\n            case 4 -> {\r\n                //4. Cancel order\r\n                System.out.println(\"Here is a list of all your orders. \" +\r\n                        \"Choose one and insert Order_id below.\\nID   Table\\t\\t\\tStatus\");\r\n                getAllOrdersByWaiterID(connection, authID);\r\n                orderID = scan.nextInt();\r\n                cancelOrder(connection, orderID);\r\n            }\r\n            case 5 -> {\r\n                //5. Close order\r\n                System.out.println(\"Here is a list of all your orders. \" +\r\n                        \"Choose one and insert Order_id below.\\nID   Table\\t\\t\\tStatus\");\r\n                getAllOrdersByWaiterID(connection, authID);\r\n                orderID = scan.nextInt();\r\n                closeOrder(connection, orderID);\r\n            }\r\n            case 6 -> {\r\n                //6. Create a cheque\r\n                System.out.println(\"Here is a list of all your orders. \" +\r\n                        \"Choose one and insert Order_id below.\\nID   Table\\t\\t\\tStatus\");\r\n                getAllOrdersByWaiterID(connection, authID);\r\n                orderID = scan.nextInt();\r\n                viewOrderByID(connection, orderID);\r\n            }\r\n            case 7 ->\r\n                //7. Reserve table\r\n                    reserveTable(connection);\r\n            case 8 ->\r\n                //8. Take off reservation\r\n                    unreserveTable(connection);\r\n            default -> {\r\n                System.out.println(\" ---> There is no such option, please choose another one <--- \");\r\n                waitersChoice(connection, authID);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void getAllOrdersByWaiterID(Connection connection, int authID) {\r\n        String viewMeals = \"SELECT tables.waiter_id, orders.status, orders.id, orders.tables_id, meals.meal_title, orders_items.quantity_of_meals, meals.price FROM orders INNER JOIN orders_items ON orders.id = orders_items.order_id INNER JOIN meals ON orders_items.meal_id = meals.id INNER JOIN tables ON orders.tables_id = tables.id WHERE tables.waiter_id = \" + authID + \" ORDER BY orders.id, orders.status DESC\";\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(viewMeals);\r\n            System.out.println(\"Here is all your orders:\\nwaiter_id\\t | status\\t | order_id\\t | table_id\\t | meal_title\\t\\t\\t | quantity\\t | price_per_each\");\r\n\r\n            while (resultSet.next()) {\r\n                System.out.print(resultSet.getInt(1) + \"\\t\\t\\t\");\r\n                System.out.print(\" | \" + resultSet.getString(2) + \"\\t\\t\");\r\n                System.out.print(\" | \" + resultSet.getInt(3) + \"\\t\\t\");\r\n                System.out.print(\" | \" + resultSet.getInt(4) + \"\\t\\t\");\r\n                System.out.print(\" | \" + resultSet.getString(5) + \"\\t\\t\\t\");\r\n                System.out.print(\" | \" + resultSet.getInt(6) + \"\\t\\t\");\r\n                System.out.println(\" | \" + resultSet.getDouble(7));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void createNewOrder(Connection connection) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        //FINDING AVAILABLE TABLES\r\n        String displayAvailableTables = \"SELECT id, table_reserved FROM tables WHERE tables.table_reserved = 0\";\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(displayAvailableTables);\r\n            System.out.println(\"Here is all available tables:\\nid\\t | table_reserved\");\r\n\r\n            while (resultSet.next()) {\r\n                System.out.print(resultSet.getInt(1) + \"\\t\");\r\n                System.out.println(\" | \" + resultSet.getInt(2));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Please enter table id:\");\r\n        int tables_id = scanner.nextInt();\r\n        //END OF TABLE ID\r\n\r\n        //TIPS PERCENTAGE\r\n        System.out.println(\"Please enter wanted/deserved tips amount in format XX.XX: \");\r\n        double tips = scanner.nextDouble();\r\n        //END OF TIPS PERCENTAGE\r\n\r\n        //<PAYMENT TYPE> IS DEFAULT WHILE OPENING ORDER\r\n        //<STATUS> IS OPEN WHILE OPENING THE ORDER\r\n\r\n        boolean payment_type = false;\r\n        String status = \"OPEN\";\r\n\r\n        String addNewOrder = \"INSERT INTO restaurant.orders (tables_id, tips_percentage, status, payment_type) VALUES (?, ?, ?, ?)\";\r\n\r\n        try {\r\n            PreparedStatement pStatement = connection.prepareStatement(addNewOrder);\r\n            pStatement.setInt(1, tables_id);\r\n            pStatement.setDouble(2, tips);\r\n            pStatement.setString(3, status);\r\n            pStatement.setBoolean(4, payment_type);\r\n            pStatement.executeUpdate();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //GETTING ORDER_ID\r\n        int latestOrderId = 0;\r\n        String latestOrder = \"SELECT max(id) FROM orders\";\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(latestOrder);\r\n            while (resultSet.next()) {\r\n                latestOrderId = resultSet.getInt(1);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //ADDING MEALS TO THE ORDER\r\n        addMealsToTheOrder(connection, latestOrderId);\r\n    }\r\n\r\n    public static void addMealsToTheOrder(Connection connection, int orderID){\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Please view Menu and at the bottom enter meal id to order:\");\r\n        viewAllMealsByType(connection);\r\n        System.out.println(\"Please enter meal id:\");\r\n        int meal_id = scanner.nextInt();\r\n        System.out.println(\"Please enter quantity of the meal \" +meal_id +\":\");\r\n        int quantity_of_meals = scanner.nextInt();\r\n        String addMeal = \"INSERT INTO restaurant.orders_meals (meal_id, order_id, quantity_of_meals) VALUES (?, ?, ?)\";\r\n\r\n        try {\r\n            PreparedStatement pStatement = connection.prepareStatement(addMeal);\r\n            pStatement.setInt(1, meal_id);\r\n            pStatement.setInt(2, orderID);\r\n            pStatement.setInt(3, quantity_of_meals);\r\n\r\n            pStatement.executeUpdate();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Order \" + orderID + \" has been created\");\r\n        System.out.println(\"Do you want to add more meals? Type 'yes' or 'no'\");\r\n        String repeatFunction = scanner.nextLine();\r\n        if(repeatFunction.equalsIgnoreCase(\"yes\")){\r\n            addMealsToTheOrder(connection, orderID);\r\n        } else {\r\n            waitersChoice(connection, authID);\r\n        }\r\n    }\r\n\r\n    public static void reserveTable(Connection connection) {\r\n        String displayAvailableTables = \"SELECT id, table_reserved FROM tables WHERE tables.table_reserved = 0\";\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(displayAvailableTables);\r\n            System.out.println(\"Here is all available tables:\\nid\\t | table_reserved\");\r\n\r\n            while (resultSet.next()) {\r\n                System.out.print(resultSet.getInt(1) + \"\\t\");\r\n                System.out.println(\" | \" + resultSet.getInt(2));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Enter number of the table to reserve: \");\r\n        Scanner scanner = new Scanner(System.in);\r\n        int tableNum = scanner.nextInt();\r\n        String reserve = \"UPDATE restaurant.tables SET table_reserved = true WHERE id = ?\";\r\n\r\n        try {\r\n            PreparedStatement pStatement = connection.prepareStatement(reserve);\r\n            pStatement.setInt(1, tableNum);\r\n\r\n            pStatement.executeUpdate();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Table No\" + tableNum + \" was reserved.\");\r\n\r\n        welcomeScreen(connection);\r\n\r\n    }\r\n\r\n    public static void unreserveTable(Connection connection) {\r\n        String viewNotAvailableTables = \"SELECT id, table_reserved FROM tables WHERE tables.table_reserved = 1\";\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(viewNotAvailableTables);\r\n            System.out.println(\"Here is all reserved tables:\\nid\\t | table_reserved\");\r\n\r\n            while (resultSet.next()) {\r\n                System.out.print(resultSet.getInt(1) + \"\\t\");\r\n                System.out.println(\" | \" + resultSet.getInt(2));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Enter number of table you want to unreserve: \");\r\n        Scanner scanner = new Scanner(System.in);\r\n        int tableNum = scanner.nextInt();\r\n        String reserve = \"UPDATE restaurant.tables SET table_reserved = false WHERE id = ?\";\r\n\r\n        try {\r\n            PreparedStatement pStatement = connection.prepareStatement(reserve);\r\n            pStatement.setInt(1, tableNum);\r\n\r\n            pStatement.executeUpdate();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Table No\" + tableNum + \" was unreserved.\");\r\n\r\n        welcomeScreen(connection);\r\n\r\n    }\r\n\r\n    public static void editOrder(Connection connection, int orderID){\r\n        System.out.println(\"IN PROGRESS\");\r\n        waitersChoice(connection, authID);\r\n    }\r\n\r\n    public static void cancelOrder(Connection connection, int orderID){\r\n        int tableID = 0;\r\n        String cancelOrder = \"UPDATE restaurant.orders SET status = 'CANCELLED' WHERE id = ?\";\r\n        String selectOrderTable = \"SELECT tables_id FROM orders WHERE id = \" + orderID;\r\n        String unreserveTable = \"UPDATE restaurant.tables SET table_reserved = false WHERE id = ?\";\r\n\r\n        try {\r\n            PreparedStatement pStatement = connection.prepareStatement(cancelOrder);\r\n            pStatement.setInt(1, orderID);\r\n\r\n            pStatement.executeUpdate();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(selectOrderTable);\r\n\r\n            while (resultSet.next()) {\r\n                tableID = resultSet.getInt(1);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        try {\r\n            PreparedStatement pStatement = connection.prepareStatement(unreserveTable);\r\n            pStatement.setInt(1, tableID);\r\n\r\n            pStatement.executeUpdate();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Order No\" + orderID + \" was CANCELLED.\");\r\n\r\n        waitersChoice(connection, authID);\r\n\r\n    }\r\n\r\n    public static void closeOrder(Connection connection, int orderID){\r\n        int tableID = 0;\r\n        String closeOrder = \"UPDATE restaurant.orders SET status = 'CLOSED' WHERE id = ?\";\r\n        String selectOrderTable = \"SELECT tables_id FROM orders WHERE id = \" + orderID;\r\n        String unreserveTable = \"UPDATE restaurant.tables SET table_reserved = false WHERE id = ?\";\r\n\r\n        try {\r\n            PreparedStatement pStatement = connection.prepareStatement(closeOrder);\r\n            pStatement.setInt(1, orderID);\r\n\r\n            pStatement.executeUpdate();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(selectOrderTable);\r\n\r\n            while (resultSet.next()) {\r\n                tableID = resultSet.getInt(1);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        try {\r\n            PreparedStatement pStatement = connection.prepareStatement(unreserveTable);\r\n            pStatement.setInt(1, tableID);\r\n\r\n            pStatement.executeUpdate();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Order No\" + orderID + \" was CLOSED.\");\r\n\r\n        waitersChoice(connection, authID);\r\n\r\n\r\n    }\r\n\r\n    public static void viewOrderByID(Connection connection, int orderID){\r\n        String getOrder = \"SELECT order_id, restaurant.orders.tables_id, restaurant.orders.status, ROUND(SUM(price*quantity_of_meals),2) \" +\r\n                \" FROM restaurant.orders_items INNER JOIN restaurant.meals ON orders_items.meal_id = meals.id INNER JOIN restaurant.orders \" +\r\n                \" ON orders.id = orders_items.order_id WHERE order_id = \" + orderID + \" GROUP BY order_id\";\r\n\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(getOrder);\r\n\r\n            while (resultSet.next()) {\r\n                System.out.print(\"Order ID: \" + resultSet.getInt(1));\r\n                System.out.print(\"  Table ID: \" + resultSet.getInt(2));\r\n                System.out.print(\"  Status: \" + resultSet.getString(3));\r\n                System.out.println(\"  Total amount: \" + resultSet.getDouble(4));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        waitersChoice(connection, authID);\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Maryia.java b/src/main/java/Maryia.java
--- a/src/main/java/Maryia.java	(revision 4ecfad993c11fb18138e394dc4c3418cba403353)
+++ b/src/main/java/Maryia.java	(date 1665524060687)
@@ -9,7 +9,10 @@
 
     public static void main(String[] args) {
         try {
-            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant", "root", "rootroot");
+//            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant", "root", "rootroot");
+
+            Connection connection =
+                    DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "sadomazo911");
 
             welcomeScreen(connection);
 //            checkWaiterExists(connection, 2);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"09ab8526-b3b3-4546-888f-8a253002f437\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022-10-11_14_08__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022-10-11_14_08__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Sasha/Sasha.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Sasha/Sasha.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--tags\" />\r\n        <option name=\"title\" value=\"All\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"ProjectErrors\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2FrQvFFUkO02JFtiI9cDCSj8cLr\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Lena\">\r\n    <configuration name=\"Lena\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Lena\" />\r\n      <module name=\"restaurant_project\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Maryia\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Maryia\" />\r\n      <module name=\"restaurant_project\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"TestByLena\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"TestByLena\" />\r\n      <module name=\"restaurant_project\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Lena\" />\r\n        <item itemvalue=\"Application.TestByLena\" />\r\n        <item itemvalue=\"Application.Maryia\" />\r\n        <item itemvalue=\"Application.Lena\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"09ab8526-b3b3-4546-888f-8a253002f437\" name=\"Changes\" comment=\"\" />\r\n      <created>1665247952999</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1665247952999</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first commit\">\r\n      <created>1665248105477</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665248105477</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"master commit test\">\r\n      <created>1665426121970</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665426121970</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"master commit test\">\r\n      <created>1665426244553</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665426244553</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"master commit test\">\r\n      <created>1665426322730</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665426322731</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"first steps in project\">\r\n      <created>1665441986694</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665441986695</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"first steps in project\">\r\n      <created>1665472227450</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665472227451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"first steps in project\">\r\n      <created>1665474870464</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665474870464</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first commit\" />\r\n    <MESSAGE value=\"master commit test\" />\r\n    <MESSAGE value=\"first steps in project\" />\r\n    <MESSAGE value=\"2nd commit by Jelena (small correction of 7th method)\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"2nd commit by Jelena (small correction of 7th method)\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4ecfad993c11fb18138e394dc4c3418cba403353)
+++ b/.idea/workspace.xml	(date 1665524303086)
@@ -5,9 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="09ab8526-b3b3-4546-888f-8a253002f437" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022-10-11_14_08__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022-10-11_14_08__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Sasha/Sasha.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Sasha/Sasha.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Maryia.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Maryia.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -42,7 +41,7 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="RunManager" selected="Application.Lena">
+  <component name="RunManager" selected="Application.Maryia">
     <configuration name="Lena" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="Lena" />
       <module name="restaurant_project" />
@@ -66,9 +65,9 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.Maryia" />
         <item itemvalue="Application.Lena" />
         <item itemvalue="Application.TestByLena" />
-        <item itemvalue="Application.Maryia" />
         <item itemvalue="Application.Lena" />
       </list>
     </recent_temporary>
